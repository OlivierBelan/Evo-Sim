[Runner_Info]
# used on in SNN
run_time=6
# meaning that the snn runner will run for run_time + run_time_margin time steps
run_time_margin=3
dt = 1.0


runner_type = Reinforcement
# used in Reinforcement only
online = False

# neuron_reset type: voltage_reset, threshold_reset
neuron_reset = voltage_reset

; # BEST FOR VOLTAGE DECODING -> no output threshold + beta decay

# lif or beta
decay_method = lif


# The layer to record (input, hidden, output)
record_layer = output
# spike or voltage or augmented
record = spike

# poisson, binomial, exact, rate, combinatorial and latency
encoder = combinatorial
# rate or voltage or augmented or max_spike or coeff
decoder = rate



[Exact_Encoder]
max_nb_spikes = 5
spike_amplitude = 100

[Poisson_Encoder]
max_nb_spikes = 5
spike_amplitude = 100
# reduce the noise - higher value = less noise
spike_rate = 10

[Binomial_Encoder]
max_nb_spikes = 5
spike_amplitude = 100
# higher value = less noise
reduce_noise = 1

[Combinatorial_Encoder]
spike_amplitude = 100
# Will divide the number of combinaison by this number but will increase the number of spike per combinaison
# so improve the meaning of combinaison but decrease the number of combinaison
# number of comibinaison is -> 2^(run_time/combinatorial_factor)[:combinatorial_combinaison_size]
# has to be integer and > 0
combinatorial_factor = 1
combinatorial_combinaison_size_max=10000
combinatorial_combinaison_size=10000
combinatorial_combinaison_noise=0.0
combinatorial_combinaison_noise_decay=0.999
combinatorial_roll = True

[Rate_Encoder]
spike_amplitude = 100

[Latency_Encoder]
spike_amplitude = 100

[Rate_Decoder]
# (eg if run_time = 50 and nb_neurons_per_categories = 10 and ratio_max_output_spike = 0.20 
# so formula is (run_time*nb_neurons_per_categories*ratio_max_output_spike)/nb_neurons_per_categories 
# then each categorie output neuron can spike (or will be considered) 50*10*0.20 = 100 times or (50*10*0.20)/10 = 10 spikes per neuron category for 50 time steps)
ratio_max_output_spike = 0.5

[Voltage_Decoder]
disable_output_threshold = False
# applied only if disable_output_threshold = True
# otherwise it will be the threshold and reset_voltage of the output neurons
voltage_max = 1.0
voltage_min = 0.0


[Augmented_Decoder]
spike_max = 500
spike_distribution_run = 400
spike_distribution_importance = 100
# positive, absolute, raw (positive and negative)
spike_type = positive
# first_index, by_index, all, nothing 
importance_type = by_index
# ascending, descending
linear_spike_importance_type = descending


[NEURO_EVOLUTION]
verbose = True
# maximize, minimize or closest_to_zero
optimization_type = maximize
algo_name = MAPELITE

[Record]
criteria=best_episode_raw_score mean_episode_raw_score
sorted_by=best_episode_raw_score
record_from_algo = True

[Genome_Classic]
parameter_size = 2

[Genome_NN]
inputs = 26
hiddens = 64
hiddens_active = 64
outputs = 6
inputs_multiplicator = 1
hiddens_multiplicator = 1
outputs_multiplicator = 1

is_self_neuron_connection = False

# architecture = I->H1, H1->H2, H2->O
architecture = I->H1, I->O, H1->H1, H1->O, O->H1, O->O
# architecture = I->I, I->H1, I->O, H1->I, H1->H1, H1->O, O->I, O->H1, O->O
# architecture = I->H1, I->H2, I->O, I->I, H1->O, H1->H1, H1->H2, H1->I, H2->O, H2->H1, H2->H2, H2->I, O->O, O->I, O->H1, O->H2
network_type = SNN


[MAP_ELITE]
verbose = False
pop_size=100
start_using_archive_ratio = 0.10


[Archive]
verbose = True
folder_path = ./results_archives/

# name of the description on which the archive will be based
description_name = description
# criteria on which the archive will be updated
update_criteria = fitness
# maximize, minimize or closest_to_zero
optimization_type = maximize

# number of dimensions of the archive
dimensions = 2
# number of niches in the archive
niches_nb = 1024
# more of this -> higher-quality CVT (for the KMeans algorithm)
cvt_samples = 100_000

# Can load an existing CVT if it exists
cvt_use_cache = False
# Store a Checkpoint file every n generations
checkpoint_period = 10

# Keep in memory a certain number of the best individuals (in case you want to use them)
best_population_size = 10


[Reproduction]
# percentage of the population that will be used for reproduction
nb_elites_ratio = 1.0
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_random = 0.0
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_dominance = 0.1
# if True the best genome will be kept in the population
keep_elites = False
# if True the best genomes will have a bigger chance to be selected for reproduction
reproduction_by_probability = True
# % of simirality with the parents
parents_similarities_ratio = 1.0
# Selection type : best, tournament
selection_type = best
# Tournament size -> only used if selection_type = tournament
tournament_size = 4
# SBX crossover
is_sbx = True
# Larger is the eta, more the children will be close to the parents
sbx_eta = 10.0

[Mutation]
# sbx or classic or with_topology (-> like NEAT)
mutation_type = sbx
# Probability of a new neuron mutation (in NEAT) involves using an existing population gene, if not in the genome, or creating a new gene. 
# Networks lacking a population neuron may add it or generate a novel one. (has to be between 0 and 1)
# 0 -> only new neurons and 1 -> only existing neurons (if possible) otherwise new neurons
prob_creation_mutation = 0.9

# Mutation probabilities
prob_mutation = 0.4

# Topology mutations
single_structural_mutation = False

prob_add_neuron = 0.2
prob_delete_neuron = 0.4

prob_activate_neuron = 0.2
prob_deactivate_neuron = 0.4

prob_add_synapse = 0.4
prob_delete_synapse = 0.6

prob_activate_synapse = 0.4
prob_deactivate_synapse = 0.6

# Parameters mutations
prob_mutate_neuron_params = 0.9
prob_mutate_synapse_params = 0.9



[weight_synapse_parameter]
max = 100.0
min = -100.0

mu = 0.0
mu_max = 100.0
mu_min = -100.0

sigma = 1.0
sigma_max = 10.0
sigma_min = 0.0
sigma_decay = 1.0

[input_current_neuron_parameter]
max = 5.0
min = 0.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[voltage_neuron_parameter]
max = 0.0
min = 0.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[threshold_neuron_parameter]
max = 1.0
min = 1.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[tau_neuron_parameter]
max = 200.0
min = 200.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


; [refractory_neuron_parameter]
; mutate_rate = 0.8
; max = 0.0
; min = 0.0

; mu = 0.0   
; mu_max = 0.0
; mu_min = 0.0

; sigma = 0.0
; sigma_max = 0.0
; sigma_min = 0.0
; sigma_decay = 0.999



; [delay_synapse_parameter]
; mutate_rate = 0.8
; max = 0.0
; min = 0.0

; mu = 0.0
; mu_max = 0.0
; mu_min = 0.0

; sigma = 0.0
; sigma_max = 0.0
; sigma_min = 0.0
; sigma_decay = 0.999

[classic_parameter]
mutate_rate = 0.8
max = 1
min = 0

mu = 0
mu_max = 1.0
mu_min = -0.0

sigma = 1.0
sigma_max = 1
sigma_min = 0.1
sigma_decay = 0.999