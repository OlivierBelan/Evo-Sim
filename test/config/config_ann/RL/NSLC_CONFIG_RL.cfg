[Runner_Info]
runner_type = Reinforcement


[NEURO_EVOLUTION]
verbose = True
# maximize, minimize or closest_to_zero
optimization_type = maximize
algo_name = NSLC

[Record]
criteria=best_episode_raw_score mean_episode_raw_score
sorted_by=best_episode_raw_score
record_from_algo = True

[Genome_NN]
inputs = 26
hiddens = 128x128
hiddens_active = 256
outputs = 6
inputs_multiplicator = 1
hiddens_multiplicator = 1
outputs_multiplicator = 1

is_self_neuron_connection = False
# Hidden layer can be used as a feedback to another hidden layer, 
# e.g H1->H2 will considered as a feedback and forward connection
is_inter_hidden_feedback = False
is_layer_normalization = True

architecture = I->H1, H1->H2, H2->O
# architecture = I->H1, I->O, H1->H1, H1->O, O->H1, O->O
# architecture = I->I, I->H1, I->O, H1->I, H1->H1, H1->O, O->I, O->H1, O->O
# architecture = I->H1, I->H2, I->O, I->I, H1->O, H1->H1, H1->H2, H1->I, H2->O, H2->H1, H2->H2, H2->I, O->O, O->I, O->H1, O->H2
network_type = ANN


[NSLC]
verbose = False
pop_size = 128
neighbourhood_ratio = 0.15
# if True the local competition is used
# else the global competition is used
is_local_competition = False
# at each generation:
# if archive_best -> the population is built from the best archives niches 
# if arhive_random -> the population is built from random archives niches
# if population -> the population remain the same (but will be modified by the reproduction module)
update_population_type = archive_best

[Archive]
verbose = True
folder_path = ./results_archives/
# name of the description on which the archive will be based
description_name = description
# criteria on which the archive will be updated
update_criteria = fitness
# maximize, minimize or closest_to_zero
optimization_type = maximize

# number of dimensions of the archive
dimensions = 2
# number of niches in the archive
niches_nb = 1024
# more of this -> higher-quality CVT (for the KMeans algorithm)
cvt_samples = 25_000

# Can load an existing CVT if it exists
cvt_use_cache = False
# Store a Checkpoint file every n generations
checkpoint_period = 10

# Keep in memory a certain number of the best individuals (in case you want to use them)
best_population_size = 10




[Reproduction]
# percentage of the population that will be used for reproduction
nb_elites_ratio = 1.0
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_random = 0.0
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_dominance = 0.1
# if True the best genome will be kept in the population
keep_elites = False
# if True the best genomes will have a bigger chance to be selected for reproduction
reproduction_by_probability = True
# % of simirality with the parents
parents_similarities_ratio = 1.0
# Selection type : best, tournament
selection_type = best
# Tournament size -> only used if selection_type = tournament
tournament_size = 4
# SBX crossover
is_sbx = True
# Larger is the eta, more the children will be close to the parents
sbx_eta = 10.0


[Mutation]
# sbx or classic or with_topology (-> like NEAT)
mutation_type = sbx
# Probability of a new neuron mutation (in NEAT) involves using an existing population gene, if not in the genome, or creating a new gene. 
# Networks lacking a population neuron may add it or generate a novel one. (has to be between 0 and 1)
# 0 -> only new neurons and 1 -> only existing neurons (if possible) otherwise new neurons
prob_creation_mutation = 0.9

# Mutation probabilities
prob_mutation = 0.4

# Topology mutations
single_structural_mutation = False

prob_add_neuron = 0.2
prob_delete_neuron = 0.4

prob_activate_neuron = 0.2
prob_deactivate_neuron = 0.4

prob_add_synapse = 0.4
prob_delete_synapse = 0.6

prob_activate_synapse = 0.4
prob_deactivate_synapse = 0.6

# Parameters mutations
prob_mutate_neuron_params = 0.9
prob_mutate_synapse_params = 0.9


[Genome_Classic]
parameter_size = 10



[classic_parameter]
max = 1.0
min = 0.0

mu = 0.0
mu_max = 0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 0.999


# [bias_neuron_parameter]
# mutate_rate = 0.8
# max = 10.0
# min = -10.0

# mu = 0.0
# mu_max = 10.0
# mu_min = 0.0

# sigma = 1.0
# sigma_max = 10.0
# sigma_min = 0.0
# sigma_decay = 0.999


[weight_synapse_parameter]
mutate_rate = 0.8
max = 10.0
min = -10.0

mu = 0.0
mu_max = 10.0
mu_min = -10.0

sigma = 1.0
sigma_max = 10.0
sigma_min = 0.0
sigma_decay = 0.999