[Runner_Info]
runner_type = Reinforcement


[NEURO_EVOLUTION]
verbose = False
# maximize, minimize or closest_to_zero
optimization_type = closest_to_zero
algo_name = NSGA

[Record]
criteria= best_episode_raw_score mean_episode_raw_score
sorted_by=best_episode_raw_score

[Genome_NN]
inputs = 24
hiddens = H1:64
outputs = 4
inputs_multiplicator = 1
hiddens_multiplicator = 1
outputs_multiplicator = 1

is_self_neuron_connection = True

# forward = I->(H1_relu_norm), H1->(H2_relu_norm), H2->O_tanh
# forward = I->(H1_relu_norm), H1->(H2_relu_norm), H2->(H3_relu_norm), H3->O_tanh
forward = I->(H1_relu,O_tanh), H1->(H1_relu,O_tanh), O->(H1_relu, O_tanh)
# forward = (H1, H2_prev)_tanh_norm->(H1_norm_sigmoid, H2_relu), (H1,H2)_norm_relu->O, O_tanh
# forward = (H1, H2_prev)_tanh_norm->H1, (H1,H2)_norm_relu->O, O_tanh

# architecture = I->H1, H1->H2, H2->O
# architecture = I->H1, H1->H2, H2->H3, H3->O
architecture = I->H1, I->O, H1->H1, H1->O, O->H1, O->O
# architecture = I->I, I->H1, I->O, H1->I, H1->H1, H1->O, O->I, O->H1, O->O
network_type = ANN


[NSGA]
pop_size = 300
fitness_dimension = 2
# maximize, minimize or closest_to_zero
optimization_type = minimize
verbose = False


[Distance]
distance_threshold_ratio = 0.20
distance_threshold_min = 90.0
parameter_coeff = 0.5
topology_coeff = 1.0
magnitude_coeff = 1.0
direction_coeff = 1.0



[Reproduction]
# percentage of the population that will be used for reproduction
nb_elites_ratio = 0.99
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_random = 0.0
# percentage of the population (which are not elite) that will be used for reproduction
prob_reproduction_dominance = 0.1
# if True the best genome will be kept in the population
keep_elites = False
# if True the best genomes will have a bigger chance to be selected for reproduction
reproduction_by_probability = True
# % of simirality with the parents
parents_similarities_ratio = 1.0
# Selection type : best, tournament
selection_type = best
# Tournament size -> only used if selection_type = tournament
tournament_size = 2
# SBX crossover
is_sbx = True
# Larger is the eta, more the children will be close to the parents
sbx_eta = 20.0


[Mutation]
# Probability of a new neuron mutation (in NEAT) involves using an existing population gene, if not in the genome, or creating a new gene. 
# Networks lacking a population neuron may add it or generate a novel one. (has to be between 0 and 1)
# 0 -> only new neurons and 1 -> only existing neurons (if possible) otherwise new neurons
prob_creation_mutation = 0.9

# Mutation probabilities
prob_mutation = 0.7

# Topology mutations
single_structural_mutation = False

prob_add_neuron = 0.2
prob_delete_neuron = 0.4

prob_activate_neuron = 0.2
prob_deactivate_neuron = 0.4

prob_add_synapse = 0.4
prob_delete_synapse = 0.6

prob_activate_synapse = 0.4
prob_deactivate_synapse = 0.6

# Parameters mutations
prob_mutate_neuron_params = 0.9
prob_mutate_synapse_params = 0.9

# Dominance


[Genome_Classic]
parameter_size = 2

[classic_parameter]
max = 5.0
min = -5.0

mu = 0.0
mu_max = 10.0
mu_min = -5.0

sigma = 2.0
sigma_max = 10.0
sigma_min = 0.0
sigma_decay = 0.999



[bias_neuron_parameter]
max = 10.0
min = -10.0

mu = 0.0
mu_max = 10.0
mu_min = 0.0

sigma = 1.0
sigma_max = 10.0
sigma_min = 0.0
sigma_decay = 0.999


[weight_synapse_parameter]
max = 10.0
min = -10.0

mu = 0.0
mu_max = 10.0
mu_min = -10.0

sigma = 1.0
sigma_max = 10.0
sigma_min = 0.0
sigma_decay = 0.999